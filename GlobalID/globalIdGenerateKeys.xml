<!--
    ~ Levels Beyond CONFIDENTIAL
    ~
    ~ Copyright 2003 - 2019 Levels Beyond Incorporated
    ~ All Rights Reserved.
    ~
    ~ NOTICE:  All information contained herein is, and remains
    ~ the property of Levels Beyond Incorporated and its suppliers,
    ~ if any.  The intellectual and technical concepts contained
    ~ herein are proprietary to Levels Beyond Incorporated
    ~ and its suppliers and may be covered by U.S. and Foreign Patents,
    ~ patents in process, and are protected by trade secret or copyright law.
    ~ Dissemination of this information or reproduction of this material
    ~ is unlawful and strictly forbidden unless prior written permission is obtained
    ~ from Levels Beyond Incorporated.
    -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
          id="globalIdGenerateKeys"
          name="Global ID Generate Keys for Dynamic Properties"
          executionLabelExpression="Global ID Generate Keys"
          subjectDOClassName=""
          adminOnly="true"
          showInUserInterface="true"
          sdkVersion="">


    <initialStepName>generate keys</initialStepName>
    

    <groovyStep name="generate keys"
                resultDataDef="dynamicProps"
                nextStep="fin">
        <script>
            <![CDATA[
            import java.util.Random
            import java.lang.Math
            import java.nio.ByteBuffer
            import java.nio.charset.StandardCharsets
            import groovy.json.JsonOutput

            byte rotateRight(byte bits, int shift)
            {
                return (byte)(((bits & 0xff)  >>> shift) | ((bits & 0xff) << (8 - shift)))
            }

            byte rotateLeft(byte bits, int shift)
            {
                return (byte)(((bits & 0xff) << shift) | ((bits & 0xff) >>> (8 - shift)))
            }

            def rand = new Random()

            if (passphrase != null && passphrase.length() > 0) {
                byte zero = 0
                long seed
                ba = ByteBuffer.allocate(8)
                Arrays.fill(ba.rewind().array(), zero)
                byte[] bytes = passphrase.getBytes(StandardCharsets.ISO_8859_1)
                for (def i=0; i < bytes.length; i++) {
                    byte b = bytes[i]
                    int idx = i % 8
                    int rot = i % 3
                    ba.put(i % 8, (byte) (ba.get(idx) ^ (idx % 2 == 0 ? rotateLeft(b, rot) : rotateRight(b, rot))))
                }
                seed = ba.getLong()
                rand.setSeed(seed)
            }
            def ciphers = []

            for (def i=0; i < 4; i++) {
                def map = new ArrayList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
                def map_p = []
                while (!map.isEmpty()) {
                    int rmidx = Math.abs(rand.nextInt()) % map.size()
                    map_p.add(map.remove(rmidx))
                }
                def kernel = []
                for (def j=0; j < 15; j++) {
                    kernel.add(rand.next(8))
                }
                ciphers.add(['map' : map_p, 'key' : kernel])
            }

            def rval = [:]
            rval['workflow.globalId.passphrase'] = passphrase
            rval['workflow.globalId.template'] = JsonOutput.toJson(ciphers)
            return JsonOutput.toJson(rval)
            ]]>
        </script>
    </groovyStep>

    <noopStep name="fin" />

    <contextDataDef name="passphrase" dataType="String" userInput="true"/>
    <contextDataDef name="dynamicProps" dataType="JSON" />
    
</workflow>
