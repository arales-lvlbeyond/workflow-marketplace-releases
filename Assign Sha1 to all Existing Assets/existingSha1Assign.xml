<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2019 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
	xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
	id="existingSha1Assign"
	name="Assign Sha1 on existing assets"
	executionLabelExpression="Assign Sha1 on all existing assets"
	subjectDOClassName=""
	showInUserInterface="true"
	sdkVersion=""
>

	<initialStepName>Get Assets without sha1</initialStepName>


	<queryStep name="Get Assets without sha1"
		executionLabelExpression="Found ${allAssets.size()} Assets without Sha1"
		targetDataObjectClass="AssetMaster"
		resultDataDef="allAssets"
		pctComplete="10"
		nextStep="is workflow executing"
	>
		<criteria>
			<![CDATA[
            <and>
                    <condition property="metadata.sha1" op="isnull" />
            </and>
    	]]>
		</criteria>
	</queryStep>
	
	
	<queryStep name="is workflow executing"
		targetDataObjectClass="WorkflowExecution"
		resultDataDef="currentExecutions"
		executionLabelExpression="Check to see if this workflow is currently executing"
	>
		<transition condition="${currentExecutions.size() == 0}">
			<targetStepName>check if allAssets is empty</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>workflow is running</targetStepName>
		</transition>
		
		<criteria>
			<![CDATA[
                <criteria>
                    <and>
                        <condition property="workflowVersion.workflow.key" op="eq">
                            <test value="${ #this.workflow.workflowVersion.workflow.key }" />
                        </condition>
                        <condition property="uuid" op="noteq">
                            <test value="${ #this.workflow.uuid }" />
                        </condition>
                        <condition property="status" op="in">
                            <tests>
                                <test value="CREATED" />
                                <test value="QUEUED" />
                                <test value="EXECUTING" />
                            </tests>
                        </condition>
                    </and>
                </criteria>
            ]]>
		</criteria>
	</queryStep>
	
	
	<!-- ................................................... Initial Checks .................................................... -->
	<noopStep name="check if allAssets is empty"
		executionLabelExpression="are there nextAssets in allAssets? ${allAssets != null AND allAssets.size() &gt; 0}"
	>
		<transition condition="${allAssets != null AND allAssets.size() &gt; 0}">
			<targetStepName>query for running subflows</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>no nextAssets to process</targetStepName>
		</transition>
	</noopStep>
	
	
	<!-- ................................................... Queue Loop ................................................... -->
	<queryStep name="query for running subflows"
		targetDataObjectClass="WorkflowExecution"
		resultDataDef="executingSubflows"
		executionLabelExpression="checking for workflows (with id = ${subflowId}) that are also not in a finished state"
		devStep="true"
		nextStep="check running subflows"
	>
		<criteria>
			<![CDATA[
            <criteria>
                <and>
                    <condition property="workflowVersion.workflow.key" op="eq">
                        <test value="${subflowId}"/>
                    </condition>
                    <condition property="status" op="in">
                        <tests>
                            <test value="CREATED" />
                            <test value="QUEUED" />
                            <test value="EXECUTING" />
                         </tests>
                    </condition>
                </and>
            </criteria>
            ]]>
		</criteria>
	</queryStep>
	
	
	<noopStep name="check running subflows"
		executionLabelExpression="number of subflows (id = ${subflowId}) running >>> ${executingSubflows.size()} out of ${queueLimit}"
		devStep="true"
	>
		<transition condition="${ executingSubflows.size() &lt; queueLimit }">
			<targetStepName>ready next nextAssets</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>queue full</targetStepName>
		</transition>
	</noopStep>
	
	
	<delayStep name="queue full"
		delaySecondsExpression="${ queryPollInterval }"
		executionLabelExpression="${allAssets.size()} nextAssets remaining | Subflows running: ${executingSubflows.size()}/${queueLimit} | Waiting ${queryPollInterval} seconds."
		nextStep="query for running subflows"
	/>
	
	
	<setContextData name="ready next nextAssets"
		targetDataDef="nextAssets"
		valueExpression="${allAssets.size() &gt; batchSize ? allAssets.subList(0, batchSize) : allAssets.subList(0, allAssets.size()) }"
		executionLabelExpression="got ${nextAssets.size()} nextAssets to process"
		nextStep="remove nextAssets from main list"
		devStep="true"
	/>
	
	
	<groovyStep name="remove nextAssets from main list"
		resultDataDef="allAssets"
		executionLabelExpression="remove ${nextAssets.size()} nextAssets from the main list"
		nextStep="send to subflow"
		devStep="true"
	>
		<script>
			<![CDATA[
			allAssets.removeAll(nextAssets)
			return allAssets
			]]>
		</script>
	</groovyStep>
	
	
	<executeSubflowStep name="send to subflow"
		targetWorkflowId="${subflowId}"
		executionLabelExpression="Sending ${nextAssets.size()} assets to subflow"
		subjectChangePath="${nextAssets}"
		subflowTargetDataDef="asset"
		nextStep="check for more nextAssets" />
	
	
	<noopStep name="check for more nextAssets"
		executionLabelExpression="number of nextAssets remaining >>> ${allAssets.size()}"
		devStep="true"
	>
		<transition condition="${allAssets.size() &gt; 0}">
			<targetStepName>query for running subflows</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</noopStep>
	
	
	<!-- ................................................... End Steps .................................................... -->
	<!-- success -->
	<noopStep name="no nextAssets to process"
		pctComplete="99"
		nextStep="end"
	/>
	
	
	<noopStep name="end" pctComplete="100"/>
	
	
	<!-- fail -->
	<failWorkflowStep name="workflow is running"
		executionLabelExpression="Workflow already executing on the directory"
		reasonExpression="Workflow already executing on the directory"
	/>
	
	
	<!-- ............................................... Context Data Defs ................................................ -->
	<!-- .......... Input Variables .......... -->
	
	
	<!-- ....... Processing Variables ........ -->
	<contextDataDef name="currentExecutions"    dataType="Data Object"  multiple="true"/>
	<contextDataDef name="allAssets"            dataType="Data Object"  multiple="true"/>
	<!-- queue loop variables -->
	<contextDataDef name="nextAssets"           dataType="Data Object"  multiple="true"/>
	<contextDataDef name="executingSubflows"    dataType="Data Object"  multiple="true"/>
	<contextDataDef name="queueLimit"           dataType="Integer"      defaultDataExpression="${#sysconfig('workflows.sha1Assign.queueLimit') ?: 11}"/>
	<contextDataDef name="batchSize"            dataType="Integer"      defaultDataExpression="${#sysconfig('workflows.sha1Assign.batchSize') ?: 10}"/>
	<contextDataDef name="queryPollInterval"    dataType="Integer"      defaultDataExpression="${#sysconfig('workflows.sha1Assign.queryPollInterval') ?: 60}"/>
	<contextDataDef name="subflowId"            dataType="String"       defaultDataExpression="existingSha1AssignSubflow"/>
	
</workflow>
