<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2019 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  ~
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
	xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
	id="getAssetsByRQL"
	name="Get Assets by RQL"
	executionLabelExpression="Fetching assets with RQL: ${rqlString}"
	subjectDOClassName=""
	showInUserInterface="false"
	resultDataDef="assets"
	sdkVersion=""
>
	
	<initialStepName>get assets by RQL</initialStepName>
	
	
	<groovyStep
		name="get assets by RQL"
		executionLabelExpression="RQL: ${rqlString}"
		resultDataDef="assets"
		nextStep="end"
	>
		<script>
            <![CDATA[
			import com.levelsbeyond.service.inventory.InventorySearchService
			import com.levelsbeyond.service.inventory.InventorySearchCriteria
			import com.levelsbeyond.api.inventory.InventorySearchResponse
			import com.levelsbeyond.api.inventory.InventorySearchResult
			import com.fasterxml.jackson.databind.JsonNode
			import com.routeto1.spring.ApplicationContextHolder
			import com.routeto1.data.impl.DynamicDataObjectDAO
			import com.routeto1.data.IDataObject;
			import com.routeto1.asset.filesystem.AssetMaster
			import com.routeto1.asset.AssetCollection
			import com.levelsbeyond.service.inventory.reference.InventoryReferenceService;
			
			InventorySearchService inventorySearchService = ApplicationContextHolder.getApplicationContext().getBean(InventorySearchService.class)
			DynamicDataObjectDAO dataObjectDAO = ApplicationContextHolder.getApplicationContext().getBean(DynamicDataObjectDAO.class)
			InventoryReferenceService inventoryReferenceService = ApplicationContextHolder.getApplicationContext().getBean(InventoryReferenceService.class)
			
			
			InventorySearchCriteria criteria = InventorySearchCriteria.builder()
				.setRql(rqlString)
				.build()
			
			Collection<JsonNode> esResults = inventorySearchService.search(criteria).getResults()
			def assetArray = new ArrayList()
			esResults.each {record ->
				IDataObject dataObject = dataObjectDAO.findById(inventoryReferenceService.getDataObjectClassForKey(record.get("inventoryTypeName").asText()), record.get("id").asText())
				assetArray.add(dataObject)
			}
			
			return assetArray
			]]>
        </script>
	</groovyStep>
	
	<noopStep name="end"/>
	
	<contextDataDef name="rqlString" dataType="String"/>
	<contextDataDef name="assets" dataType="Data Object" multiple="true"/>

</workflow>
