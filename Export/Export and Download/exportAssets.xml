<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2019 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns="http://levelsbeyond.com/schema/workflow"
		xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
		xsi:schemaLocation="http://levelsbeyond.com/schema/workflow http://schema.levelsbeyond.com/latest/studio.xsd"
		id="exportAssets"
		name="Export Assets"
		description="Export assets"
		executionLabelExpression="Export Asset | ${subject.name}"
		showInUserInterface="false"
		subjectDOClassName=""
		sdkVersion=""
		resultDataDef="exportedFile"
>
	
	<initialStepName>check for archived content</initialStepName>
	
	<!--	Evaluate if asset can be processed. Raise workflow error if not	-->
	<noopStep name="check for archived content"
			executionLabelExpression="Check if source content is archived"
	>
		<transition condition="${contentUse == 'SOURCE' AND contentArchived}">
			<targetStepName>content archived</targetStepName>
		</transition>
		<transition condition="${contentUse == 'OTHER' AND contentArchived}">
			<targetStepName>content archived</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>check input values</targetStepName>
		</transition>
	</noopStep>
	
	<noopStep name="check input values"
			executionLabelExpression="Exporting: ${contentUse}"
	>
		<transition condition="${contentUse == 'OTHER' AND targetTemplateName != null}">
			<targetStepName>convert video</targetStepName>
		</transition>
		<transition condition="${contentExportedFile.file.exists()}">
			<targetStepName>copy transcode result</targetStepName>
		</transition>
		<!--	Adding this transition for RE 2.3.x only when Proxies are in S3 as file.exists() cannot read an S3 bucket. Bug fixed in 2.7	-->
		<transition condition="${contentUse == 'PROXY'}">
			<targetStepName>copy transcode result</targetStepName>
		</transition>
		<!--	end	-->
		<transition condition="true">
			<targetStepName>file not found</targetStepName>
		</transition>
	</noopStep>
	
	<!-- ................................................... Workflow Body .................................................... -->
	<convertVideoStep name="convert video"
			executionLabelExpression="Converting video ${sourceFile.absolutePath} to ${targetTemplateName}"
			mediaConversionTemplateExpression="${targetTemplateName}"
			sourceFileExpression="${sourceFile}"
			outputDirectoryExpression="${#sysconfig('temp.export.path')}"
			resultDataDef="transcodedFile"
			priorityExpression="${priority}"
			nextStep="set exported file" />
	
	
	<setContextData name="set exported file"
			devStep="true"
			nextStep="copy transcode result"
	>
		<set targetDataDef="contentExportedFile" valueExpression="${transcodedFile}"/>
	</setContextData>
	
	
	<copyFileStep
			name="copy transcode result"
			executionLabelExpression="Copy transcode result ${contentExportedFile.absolutePath} to ${directoryToZip})"
			sourceFileExpression="${contentExportedFile}"
			targetDirectoryExpression="${directoryToZip}"
			targetFilenameExpression="${#baseFilename(subject.name)}.${#extension(contentExportedFile.name)}"
			resultDataDef="exportedFile"
	>
		<transition condition="${transcodedFile.file.exists()}">
			<targetStepName>delete transcoded file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</copyFileStep>
	
	<deleteFileStep name="delete transcoded file"
			sourceFilesExpression="${transcodedFile}"
			executionLabelExpression="Deleting transcode artifact ${transcodedFile.absolutePath}"
			nextStep="end"
	/>
	
	
	<!-- ................................................... End Steps .................................................... -->
	<!-- success -->
	<noopStep name="end"/>
	
	<createFailureNotificationStep
			name="content archived"
			executionLabelExpression="Source content is archived"
			notificationTypeExpression="error"
			notificationBodyExpression="Source content is archived. Restore source content before running this workflow"
			nextStep="end" />
	
	<createFailureNotificationStep
			name="file not found"
			executionLabelExpression="File not found"
			notificationTypeExpression="error"
			notificationBodyExpression="404 - File not found."
			nextStep="end" />
	
	<!-- ................................................... Data Defs .................................................... -->
	<!-- ............ INPUT ............. -->
	<contextDataDef name="contentUse" dataType="String" />
	<contextDataDef name="targetTemplateName" dataType="String" />
	<contextDataDef name="directoryToZip" dataType="String" />
	
	<!-- ......... PROCESSING ........... -->
	<!-- Files -->
	<contextDataDef name="transcodedFile" dataType="File"/>
	<contextDataDef name="contentExportedFile" dataType="File" defaultDataExpression="${contentExported.file}" />
	<contextDataDef name="sourceFile" dataType="File" defaultDataExpression="${subject.sourceContent.file}"/>
	<contextDataDef name="exportedFile" dataType="File"/>
	<!-- Data Objects -->
	<contextDataDef name="contentExported" dataType="Data Object" defaultDataExpression="${contentUse.equals('MEZZANINE') ? #mezzanineContent(subject) : ( contentUse.equals('PROXY') ? #proxyContent(subject) : #sourceContent(subject) )}"/>
	<!-- Other -->
	<contextDataDef name="contentArchived" dataType="Boolean" defaultDataExpression="${subject.sourceContent.truncatedFlag}"/>
	<contextDataDef name="priority" dataType="Integer" defaultDataExpression="85"/>

</workflow>