<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2020 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://schema.levelsbeyond.com/latest/studio.xsd"
          id="synchronizeUploadedPackages"
          name="Synchronize Uploaded Packages"
          executionLabelExpression="Synchronizing Uploaded MediaShuttle Packages with Reach Engine... | ${mediaShuttlePackageIds.toString()}"
          subjectDOClassName=""
          sdkVersion=""
          devWorkflow="true"
>
    
    <initialStepName>check if workflow is already executing</initialStepName>
    
    <queryStep
        name="check if workflow is already executing"
        pctComplete="5"
        targetDataObjectClass="WorkflowExecution"
        resultDataDef="currentExecutions">
        <transition condition="${currentExecutions.size() == 0}">
            <targetStepName>set uploads path directory</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>workflow already executing</targetStepName>
        </transition>
        
        <criteria>
            <![CDATA[
				<criteria>
					<and>
						<condition property="workflowVersion.workflow.key" op="eq">
							<test value="${ #this.workflow.workflowVersion.workflow.key }" />
						</condition>
						<condition property="uuid" op="noteq">
							<test value="${ #this.workflow.uuid }" />
						</condition>
						<condition property="status" op="in">
							<tests>
								<test value="CREATED" />
								<test value="QUEUED" />
								<test value="EXECUTING" />
							</tests>
						</condition>
					</and>
				</criteria>
			]]>
        </criteria>
    </queryStep>
    
    <setContextData name="set uploads path directory"
        targetDataDef="uploadsPathDir"
        valueExpression="${ uploadsPath.startsWith('s3') ? #mapPathReverse(uploadsPath, 's3mapping') : uploadsPath }"
        nextStep="get package ids"
        devStep="true"
    />
    
    <groovyStep name="get package ids"
        resultDataDef="mediaShuttlePackageIds"
        executionLabelExpression="Retrieving package ID's from ${uploadsPath}. ${mediaShuttlePackageIds.size()} package id's found."
    >
        <transition condition="${mediaShuttlePackageIds.size() &gt; 0}">
            <targetStepName>synchronize packages</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>no package ids found</targetStepName>
        </transition>
        <script>
            <![CDATA[
            def packageIds = []
    
            if (uploadFiles != null) {
                for (file in uploadFiles) {
            
                    if (file.name.toString().contains('.json')) {
                        continue
                    }
            
                    def filePath = file.getAbsolutePath()
                    def packageId = filePath.substring(uploadsPathDir.length(), filePath.length()).split('/')[0]
            
                    if (!packageIds.contains(packageId)) {
                        packageIds.push(packageId)
                    }
                }
            }
    
            return packageIds
            ]]>
        </script>
    </groovyStep>
    
    <executeSubflowStep name="synchronize packages"
                        targetWorkflowId="${subflowId}"
                        executionLabelExpression="Synchronizing ${mediaShuttlePackageIds.size()} packages..."
                        subjectChangePath="${mediaShuttlePackageIds}"
                        waitForCompletionExpression="false"
                        subflowTargetDataDef="packageId"
                        nextStep="end">
        <subflowContextDataMapping parentDataDef="uploadsPath"              subflowDataDef="uploadsPath"/>
        <subflowContextDataMapping parentDataDef="previouslyIngestedPath"   subflowDataDef="previouslyIngestedPath"/>
        <subflowContextDataMapping parentDataDef="portalId"                 subflowDataDef="portalId" />
        <subflowContextDataMapping parentDataDef="repoPath"                 subflowDataDef="repoPath"/>

    </executeSubflowStep>
    
    <!-- ................................................... End Steps .................................................... -->
    <noopStep name="no package ids found" />
    
    <noopStep name="workflow already executing"
              executionLabelExpression="Workflow is already executing."
    />
    
    <!-- success -->
    <noopStep name="end"/>
    
    <!-- ................................................... Data Defs .................................................... -->
    <!-- Inputs -->
    <contextDataDef name="uploadsPath"                  dataType="String"           required="true" />
    <contextDataDef name="previouslyIngestedPath"       dataType="String"           required="true" />
    <contextDataDef name="portalId"                     dataType="String"           required="true" />
    <contextDataDef name="packageId"                    dataType="String"           required="true" />
    <contextDataDef name="repoPath"                     dataType="String" />
    <!-- Processing -->
    <contextDataDef name="uploadsPathDir"               dataType="String" />
    <contextDataDef name="mediaShuttlePackageIds"       dataType="String"           multiple="true" defaultDataExpression="[]" />
    <contextDataDef name="uploadFiles"                  dataType="File"             multiple="true"     defaultDataExpression="${#walkDir(uploadsPathDir, null)}" />
    
    <contextDataDef name="subflowId"                    dataType="String"           defaultDataExpression="synchronizePackage" />
    
    <contextDataDef name="currentExecutions" 	        dataType="Data Object" 	    multiple="true"/>
</workflow>